/*
Whop API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.10
Contact: support@whop.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whopclient

import (
	"encoding/json"
)

// CreateProductResponse struct for CreateProductResponse
type CreateProductResponse struct {
	Success NullableBool `json:"success,omitempty"`
	Formatted NullableString `json:"formatted,omitempty"`
	Product NullableCreateProductResponseProduct `json:"product,omitempty"`
}

// NewCreateProductResponse instantiates a new CreateProductResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateProductResponse() *CreateProductResponse {
	this := CreateProductResponse{}
	return &this
}

// NewCreateProductResponseWithDefaults instantiates a new CreateProductResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateProductResponseWithDefaults() *CreateProductResponse {
	this := CreateProductResponse{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateProductResponse) GetSuccess() bool {
	if o == nil || o.Success.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Success.Get()
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateProductResponse) GetSuccessOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Success.Get(), o.Success.IsSet()
}

// HasSuccess returns a boolean if a field has been set.
func (o *CreateProductResponse) HasSuccess() bool {
	if o != nil && o.Success.IsSet() {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given NullableBool and assigns it to the Success field.
func (o *CreateProductResponse) SetSuccess(v bool) {
	o.Success.Set(&v)
}
// SetSuccessNil sets the value for Success to be an explicit nil
func (o *CreateProductResponse) SetSuccessNil() {
	o.Success.Set(nil)
}

// UnsetSuccess ensures that no value is present for Success, not even an explicit nil
func (o *CreateProductResponse) UnsetSuccess() {
	o.Success.Unset()
}

// GetFormatted returns the Formatted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateProductResponse) GetFormatted() string {
	if o == nil || o.Formatted.Get() == nil {
		var ret string
		return ret
	}
	return *o.Formatted.Get()
}

// GetFormattedOk returns a tuple with the Formatted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateProductResponse) GetFormattedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Formatted.Get(), o.Formatted.IsSet()
}

// HasFormatted returns a boolean if a field has been set.
func (o *CreateProductResponse) HasFormatted() bool {
	if o != nil && o.Formatted.IsSet() {
		return true
	}

	return false
}

// SetFormatted gets a reference to the given NullableString and assigns it to the Formatted field.
func (o *CreateProductResponse) SetFormatted(v string) {
	o.Formatted.Set(&v)
}
// SetFormattedNil sets the value for Formatted to be an explicit nil
func (o *CreateProductResponse) SetFormattedNil() {
	o.Formatted.Set(nil)
}

// UnsetFormatted ensures that no value is present for Formatted, not even an explicit nil
func (o *CreateProductResponse) UnsetFormatted() {
	o.Formatted.Unset()
}

// GetProduct returns the Product field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateProductResponse) GetProduct() CreateProductResponseProduct {
	if o == nil || o.Product.Get() == nil {
		var ret CreateProductResponseProduct
		return ret
	}
	return *o.Product.Get()
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateProductResponse) GetProductOk() (*CreateProductResponseProduct, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Product.Get(), o.Product.IsSet()
}

// HasProduct returns a boolean if a field has been set.
func (o *CreateProductResponse) HasProduct() bool {
	if o != nil && o.Product.IsSet() {
		return true
	}

	return false
}

// SetProduct gets a reference to the given NullableCreateProductResponseProduct and assigns it to the Product field.
func (o *CreateProductResponse) SetProduct(v CreateProductResponseProduct) {
	o.Product.Set(&v)
}
// SetProductNil sets the value for Product to be an explicit nil
func (o *CreateProductResponse) SetProductNil() {
	o.Product.Set(nil)
}

// UnsetProduct ensures that no value is present for Product, not even an explicit nil
func (o *CreateProductResponse) UnsetProduct() {
	o.Product.Unset()
}

func (o CreateProductResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success.IsSet() {
		toSerialize["success"] = o.Success.Get()
	}
	if o.Formatted.IsSet() {
		toSerialize["formatted"] = o.Formatted.Get()
	}
	if o.Product.IsSet() {
		toSerialize["product"] = o.Product.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreateProductResponse struct {
	value *CreateProductResponse
	isSet bool
}

func (v NullableCreateProductResponse) Get() *CreateProductResponse {
	return v.value
}

func (v *NullableCreateProductResponse) Set(val *CreateProductResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateProductResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateProductResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateProductResponse(val *CreateProductResponse) *NullableCreateProductResponse {
	return &NullableCreateProductResponse{value: val, isSet: true}
}

func (v NullableCreateProductResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateProductResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


