/*
Whop API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.10
Contact: support@whop.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whopclient

import (
	"encoding/json"
)

// UpdateLicenseByKeyRequestMetadata struct for UpdateLicenseByKeyRequestMetadata
type UpdateLicenseByKeyRequestMetadata struct {
	Hwid *string `json:"hwid,omitempty"`
	HardwareName *string `json:"hardwareName,omitempty"`
}

// NewUpdateLicenseByKeyRequestMetadata instantiates a new UpdateLicenseByKeyRequestMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLicenseByKeyRequestMetadata() *UpdateLicenseByKeyRequestMetadata {
	this := UpdateLicenseByKeyRequestMetadata{}
	return &this
}

// NewUpdateLicenseByKeyRequestMetadataWithDefaults instantiates a new UpdateLicenseByKeyRequestMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLicenseByKeyRequestMetadataWithDefaults() *UpdateLicenseByKeyRequestMetadata {
	this := UpdateLicenseByKeyRequestMetadata{}
	return &this
}

// GetHwid returns the Hwid field value if set, zero value otherwise.
func (o *UpdateLicenseByKeyRequestMetadata) GetHwid() string {
	if o == nil || o.Hwid == nil {
		var ret string
		return ret
	}
	return *o.Hwid
}

// GetHwidOk returns a tuple with the Hwid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLicenseByKeyRequestMetadata) GetHwidOk() (*string, bool) {
	if o == nil || o.Hwid == nil {
		return nil, false
	}
	return o.Hwid, true
}

// HasHwid returns a boolean if a field has been set.
func (o *UpdateLicenseByKeyRequestMetadata) HasHwid() bool {
	if o != nil && o.Hwid != nil {
		return true
	}

	return false
}

// SetHwid gets a reference to the given string and assigns it to the Hwid field.
func (o *UpdateLicenseByKeyRequestMetadata) SetHwid(v string) {
	o.Hwid = &v
}

// GetHardwareName returns the HardwareName field value if set, zero value otherwise.
func (o *UpdateLicenseByKeyRequestMetadata) GetHardwareName() string {
	if o == nil || o.HardwareName == nil {
		var ret string
		return ret
	}
	return *o.HardwareName
}

// GetHardwareNameOk returns a tuple with the HardwareName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLicenseByKeyRequestMetadata) GetHardwareNameOk() (*string, bool) {
	if o == nil || o.HardwareName == nil {
		return nil, false
	}
	return o.HardwareName, true
}

// HasHardwareName returns a boolean if a field has been set.
func (o *UpdateLicenseByKeyRequestMetadata) HasHardwareName() bool {
	if o != nil && o.HardwareName != nil {
		return true
	}

	return false
}

// SetHardwareName gets a reference to the given string and assigns it to the HardwareName field.
func (o *UpdateLicenseByKeyRequestMetadata) SetHardwareName(v string) {
	o.HardwareName = &v
}

func (o UpdateLicenseByKeyRequestMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hwid != nil {
		toSerialize["hwid"] = o.Hwid
	}
	if o.HardwareName != nil {
		toSerialize["hardwareName"] = o.HardwareName
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateLicenseByKeyRequestMetadata struct {
	value *UpdateLicenseByKeyRequestMetadata
	isSet bool
}

func (v NullableUpdateLicenseByKeyRequestMetadata) Get() *UpdateLicenseByKeyRequestMetadata {
	return v.value
}

func (v *NullableUpdateLicenseByKeyRequestMetadata) Set(val *UpdateLicenseByKeyRequestMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLicenseByKeyRequestMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLicenseByKeyRequestMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLicenseByKeyRequestMetadata(val *UpdateLicenseByKeyRequestMetadata) *NullableUpdateLicenseByKeyRequestMetadata {
	return &NullableUpdateLicenseByKeyRequestMetadata{value: val, isSet: true}
}

func (v NullableUpdateLicenseByKeyRequestMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLicenseByKeyRequestMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


