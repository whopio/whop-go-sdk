/*
Whop API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.10
Contact: support@whop.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whopclient

import (
	"encoding/json"
)

// Metadata struct for Metadata
type Metadata struct {
	Hwid NullableString `json:"hwid,omitempty"`
	HardwareName NullableString `json:"hardwareName,omitempty"`
}

// NewMetadata instantiates a new Metadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadata() *Metadata {
	this := Metadata{}
	return &this
}

// NewMetadataWithDefaults instantiates a new Metadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataWithDefaults() *Metadata {
	this := Metadata{}
	return &this
}

// GetHwid returns the Hwid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Metadata) GetHwid() string {
	if o == nil || o.Hwid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Hwid.Get()
}

// GetHwidOk returns a tuple with the Hwid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Metadata) GetHwidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Hwid.Get(), o.Hwid.IsSet()
}

// HasHwid returns a boolean if a field has been set.
func (o *Metadata) HasHwid() bool {
	if o != nil && o.Hwid.IsSet() {
		return true
	}

	return false
}

// SetHwid gets a reference to the given NullableString and assigns it to the Hwid field.
func (o *Metadata) SetHwid(v string) {
	o.Hwid.Set(&v)
}
// SetHwidNil sets the value for Hwid to be an explicit nil
func (o *Metadata) SetHwidNil() {
	o.Hwid.Set(nil)
}

// UnsetHwid ensures that no value is present for Hwid, not even an explicit nil
func (o *Metadata) UnsetHwid() {
	o.Hwid.Unset()
}

// GetHardwareName returns the HardwareName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Metadata) GetHardwareName() string {
	if o == nil || o.HardwareName.Get() == nil {
		var ret string
		return ret
	}
	return *o.HardwareName.Get()
}

// GetHardwareNameOk returns a tuple with the HardwareName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Metadata) GetHardwareNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HardwareName.Get(), o.HardwareName.IsSet()
}

// HasHardwareName returns a boolean if a field has been set.
func (o *Metadata) HasHardwareName() bool {
	if o != nil && o.HardwareName.IsSet() {
		return true
	}

	return false
}

// SetHardwareName gets a reference to the given NullableString and assigns it to the HardwareName field.
func (o *Metadata) SetHardwareName(v string) {
	o.HardwareName.Set(&v)
}
// SetHardwareNameNil sets the value for HardwareName to be an explicit nil
func (o *Metadata) SetHardwareNameNil() {
	o.HardwareName.Set(nil)
}

// UnsetHardwareName ensures that no value is present for HardwareName, not even an explicit nil
func (o *Metadata) UnsetHardwareName() {
	o.HardwareName.Unset()
}

func (o Metadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hwid.IsSet() {
		toSerialize["hwid"] = o.Hwid.Get()
	}
	if o.HardwareName.IsSet() {
		toSerialize["hardwareName"] = o.HardwareName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMetadata struct {
	value *Metadata
	isSet bool
}

func (v NullableMetadata) Get() *Metadata {
	return v.value
}

func (v *NullableMetadata) Set(val *Metadata) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadata(val *Metadata) *NullableMetadata {
	return &NullableMetadata{value: val, isSet: true}
}

func (v NullableMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


