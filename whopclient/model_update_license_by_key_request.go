/*
Whop API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.10
Contact: support@whop.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whopclient

import (
	"encoding/json"
)

// UpdateLicenseByKeyRequest struct for UpdateLicenseByKeyRequest
type UpdateLicenseByKeyRequest struct {
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// NewUpdateLicenseByKeyRequest instantiates a new UpdateLicenseByKeyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLicenseByKeyRequest() *UpdateLicenseByKeyRequest {
	this := UpdateLicenseByKeyRequest{}
	return &this
}

// NewUpdateLicenseByKeyRequestWithDefaults instantiates a new UpdateLicenseByKeyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLicenseByKeyRequestWithDefaults() *UpdateLicenseByKeyRequest {
	this := UpdateLicenseByKeyRequest{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *UpdateLicenseByKeyRequest) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLicenseByKeyRequest) GetMetadataOk() (*map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *UpdateLicenseByKeyRequest) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *UpdateLicenseByKeyRequest) SetMetadata(v map[string]interface{}) {
	o.Metadata = &v
}

func (o UpdateLicenseByKeyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateLicenseByKeyRequest struct {
	value *UpdateLicenseByKeyRequest
	isSet bool
}

func (v NullableUpdateLicenseByKeyRequest) Get() *UpdateLicenseByKeyRequest {
	return v.value
}

func (v *NullableUpdateLicenseByKeyRequest) Set(val *UpdateLicenseByKeyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLicenseByKeyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLicenseByKeyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLicenseByKeyRequest(val *UpdateLicenseByKeyRequest) *NullableUpdateLicenseByKeyRequest {
	return &NullableUpdateLicenseByKeyRequest{value: val, isSet: true}
}

func (v NullableUpdateLicenseByKeyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLicenseByKeyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


